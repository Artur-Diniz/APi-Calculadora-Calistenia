// <auto-generated />
using System;
using Calistenia.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Calistenia.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231213233544_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Calistenia.Models.Exercicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exercicio_Facilitado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GpMuscular_1")
                        .HasColumnType("int");

                    b.Property<int>("GpMuscular_2")
                        .HasColumnType("int");

                    b.Property<int>("GpMuscular_3")
                        .HasColumnType("int");

                    b.Property<int>("GpMuscular_4")
                        .HasColumnType("int");

                    b.Property<string>("Modo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("dificuldade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TB_EXERCICIO");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 1,
                            GpMuscular_2 = 2,
                            GpMuscular_3 = 4,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Flexão Padrão",
                            Tipo = "PUSH",
                            dificuldade = 2
                        },
                        new
                        {
                            Id = 2,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 1,
                            GpMuscular_2 = 2,
                            GpMuscular_3 = 4,
                            GpMuscular_4 = 5,
                            Modo = "Repetição",
                            Nome = "Flexão Pike",
                            Tipo = "PUSH",
                            dificuldade = 3
                        },
                        new
                        {
                            Id = 3,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 10,
                            GpMuscular_2 = 11,
                            GpMuscular_3 = 0,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Elevação de Pernas na barra",
                            Tipo = "CORE",
                            dificuldade = 3
                        },
                        new
                        {
                            Id = 4,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 6,
                            GpMuscular_2 = 3,
                            GpMuscular_3 = 0,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Barra Fixa Pronada",
                            Tipo = "PULL",
                            dificuldade = 3
                        },
                        new
                        {
                            Id = 5,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 3,
                            GpMuscular_2 = 8,
                            GpMuscular_3 = 6,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Barra Fixa Supinada",
                            Tipo = "PULL",
                            dificuldade = 3
                        },
                        new
                        {
                            Id = 6,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 9,
                            GpMuscular_2 = 0,
                            GpMuscular_3 = 0,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Flexão Lombar",
                            Tipo = "CORE",
                            dificuldade = 2
                        },
                        new
                        {
                            Id = 7,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 12,
                            GpMuscular_2 = 0,
                            GpMuscular_3 = 0,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Prancha Lateral",
                            Tipo = "CORE",
                            dificuldade = 2
                        },
                        new
                        {
                            Id = 8,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 15,
                            GpMuscular_2 = 14,
                            GpMuscular_3 = 0,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Afundos",
                            Tipo = "PERNA",
                            dificuldade = 2
                        },
                        new
                        {
                            Id = 9,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 16,
                            GpMuscular_2 = 0,
                            GpMuscular_3 = 0,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Elevação de Calcanhar",
                            Tipo = "PERNA",
                            dificuldade = 2
                        });
                });

            modelBuilder.Entity("Calistenia.Models.RepSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Repeticao")
                        .HasColumnType("int");

                    b.Property<int>("Serie")
                        .HasColumnType("int");

                    b.Property<int>("exercicioId")
                        .HasColumnType("int");

                    b.Property<int?>("treinoId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("exercicioId");

                    b.HasIndex("treinoId");

                    b.ToTable("TB_REPSERIE");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Repeticao = 8,
                            Serie = 3,
                            exercicioId = 9,
                            treinoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Repeticao = 10,
                            Serie = 2,
                            exercicioId = 9,
                            treinoId = 1
                        },
                        new
                        {
                            Id = 3,
                            Repeticao = 12,
                            Serie = 2,
                            exercicioId = 9,
                            treinoId = 1
                        });
                });

            modelBuilder.Entity("Calistenia.Models.Treino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rep_1")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_10")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_2")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_3")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_4")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_5")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_6")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_7")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_8")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_9")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TB_TREINOS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "ta potente essa perna fibrada ai meu mano",
                            Nome = "treino de Perna",
                            Rep_1 = 1,
                            Rep_2 = 3,
                            Tipo = "PERNA"
                        });
                });

            modelBuilder.Entity("Calistenia.Usuario", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("DataAcesso")
                        .HasColumnType("datetime2")
                        .HasColumnName("Dt_Acesso");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("varbinary(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("Latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("Longitude");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PassWord_H");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PassWord_S");

                    b.Property<string>("Perfil")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Usuario")
                        .HasColumnName("Perfil");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("U_Name");

                    b.HasKey("Id");

                    b.ToTable("TB_USUARIO", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "arturdiniz06@gmail.com",
                            Latitude = -23.520024100000001,
                            Longitude = -46.596497999999997,
                            PasswordHash = new byte[] { 68, 178, 137, 126, 223, 202, 62, 204, 235, 109, 171, 187, 107, 45, 123, 127, 233, 224, 0, 8, 90, 156, 248, 132, 232, 137, 181, 48, 101, 121, 12, 96, 244, 3, 20, 93, 102, 77, 139, 9, 43, 202, 207, 94, 221, 73, 141, 91, 188, 41, 100, 48, 190, 20, 6, 182, 142, 62, 152, 105, 216, 193, 226, 68 },
                            PasswordSalt = new byte[] { 98, 29, 246, 76, 72, 90, 69, 170, 191, 125, 54, 184, 79, 141, 176, 71, 34, 157, 53, 85, 17, 183, 173, 119, 10, 104, 77, 87, 164, 175, 162, 25, 14, 144, 114, 132, 78, 40, 245, 255, 225, 151, 27, 16, 60, 60, 172, 158, 252, 174, 229, 4, 61, 13, 244, 93, 167, 84, 230, 22, 93, 221, 224, 244, 49, 37, 233, 84, 112, 161, 84, 94, 43, 211, 80, 211, 239, 92, 62, 169, 74, 78, 5, 157, 103, 96, 40, 100, 136, 155, 171, 245, 72, 73, 174, 41, 210, 35, 171, 9, 116, 216, 73, 4, 116, 221, 25, 155, 210, 8, 148, 244, 172, 186, 167, 11, 147, 103, 10, 187, 24, 97, 141, 120, 97, 169, 221, 8 },
                            Perfil = "Admin",
                            Username = "UsuarioAdmin"
                        });
                });

            modelBuilder.Entity("Calistenia.Models.RepSerie", b =>
                {
                    b.HasOne("Calistenia.Models.Exercicio", "Exercicios")
                        .WithMany("RepSeries")
                        .HasForeignKey("exercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Calistenia.Models.Treino", "Treinos")
                        .WithMany("RepSeries")
                        .HasForeignKey("treinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercicios");

                    b.Navigation("Treinos");
                });

            modelBuilder.Entity("Calistenia.Models.Treino", b =>
                {
                    b.HasOne("Calistenia.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Calistenia.Models.Exercicio", b =>
                {
                    b.Navigation("RepSeries");
                });

            modelBuilder.Entity("Calistenia.Models.Treino", b =>
                {
                    b.Navigation("RepSeries");
                });
#pragma warning restore 612, 618
        }
    }
}
