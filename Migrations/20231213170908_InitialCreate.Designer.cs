// <auto-generated />
using System;
using Calistenia.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Calistenia.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231213170908_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Calistenia.Models.Exercicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exercicio_Facilitado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GpMuscular_1")
                        .HasColumnType("int");

                    b.Property<int>("GpMuscular_2")
                        .HasColumnType("int");

                    b.Property<int>("GpMuscular_3")
                        .HasColumnType("int");

                    b.Property<int>("GpMuscular_4")
                        .HasColumnType("int");

                    b.Property<string>("Modo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("dificuldade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TB_EXERCICIO");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 1,
                            GpMuscular_2 = 2,
                            GpMuscular_3 = 4,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Flexão Padrão",
                            Tipo = "PUSH",
                            dificuldade = 2
                        },
                        new
                        {
                            Id = 2,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 1,
                            GpMuscular_2 = 2,
                            GpMuscular_3 = 4,
                            GpMuscular_4 = 5,
                            Modo = "Repetição",
                            Nome = "Flexão Pike",
                            Tipo = "PUSH",
                            dificuldade = 3
                        },
                        new
                        {
                            Id = 3,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 10,
                            GpMuscular_2 = 11,
                            GpMuscular_3 = 0,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Elevação de Pernas na barra",
                            Tipo = "CORE",
                            dificuldade = 3
                        },
                        new
                        {
                            Id = 4,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 6,
                            GpMuscular_2 = 3,
                            GpMuscular_3 = 0,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Barra Fixa Pronada",
                            Tipo = "PULL",
                            dificuldade = 3
                        },
                        new
                        {
                            Id = 5,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 3,
                            GpMuscular_2 = 8,
                            GpMuscular_3 = 6,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Barra Fixa Supinada",
                            Tipo = "PULL",
                            dificuldade = 3
                        },
                        new
                        {
                            Id = 6,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 9,
                            GpMuscular_2 = 0,
                            GpMuscular_3 = 0,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Flexão Lombar",
                            Tipo = "CORE",
                            dificuldade = 2
                        },
                        new
                        {
                            Id = 7,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 12,
                            GpMuscular_2 = 0,
                            GpMuscular_3 = 0,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Prancha Lateral",
                            Tipo = "CORE",
                            dificuldade = 2
                        },
                        new
                        {
                            Id = 8,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 15,
                            GpMuscular_2 = 14,
                            GpMuscular_3 = 0,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Afundos",
                            Tipo = "PERNA",
                            dificuldade = 2
                        },
                        new
                        {
                            Id = 9,
                            Descricao = " ",
                            Exercicio_Facilitado = "",
                            GpMuscular_1 = 16,
                            GpMuscular_2 = 0,
                            GpMuscular_3 = 0,
                            GpMuscular_4 = 0,
                            Modo = "Repetição",
                            Nome = "Elevação de Calcanhar",
                            Tipo = "PERNA",
                            dificuldade = 2
                        });
                });

            modelBuilder.Entity("Calistenia.Models.RepSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Repeticao")
                        .HasColumnType("int");

                    b.Property<int>("Serie")
                        .HasColumnType("int");

                    b.Property<int>("exercicioId")
                        .HasColumnType("int");

                    b.Property<int?>("treinoId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("exercicioId");

                    b.HasIndex("treinoId");

                    b.ToTable("TB_REPSERIE");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Repeticao = 8,
                            Serie = 3,
                            exercicioId = 9,
                            treinoId = 1
                        },
                        new
                        {
                            Id = 2,
                            Repeticao = 10,
                            Serie = 2,
                            exercicioId = 9,
                            treinoId = 1
                        },
                        new
                        {
                            Id = 3,
                            Repeticao = 12,
                            Serie = 2,
                            exercicioId = 9,
                            treinoId = 1
                        });
                });

            modelBuilder.Entity("Calistenia.Models.Treino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rep_1")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_10")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_2")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_3")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_4")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_5")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_6")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_7")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_8")
                        .HasColumnType("int");

                    b.Property<int?>("Rep_9")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TB_TREINOS");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "ta potente essa perna fibrada ai meu mano",
                            Nome = "treino de Perna",
                            Rep_1 = 1,
                            Rep_2 = 3,
                            Tipo = "PERNA"
                        });
                });

            modelBuilder.Entity("Calistenia.Usuario", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("DataAcesso")
                        .HasColumnType("datetime2")
                        .HasColumnName("Dt_Acesso");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("varbinary(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("Latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("Longitude");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PassWord_H");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PassWord_S");

                    b.Property<string>("Perfil")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Usuario")
                        .HasColumnName("Perfil");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("U_Name");

                    b.HasKey("Id");

                    b.ToTable("TB_USUARIO", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "arturdiniz06@gmail.com",
                            Latitude = -23.520024100000001,
                            Longitude = -46.596497999999997,
                            PasswordHash = new byte[] { 167, 149, 184, 175, 194, 230, 236, 163, 148, 58, 241, 8, 128, 23, 21, 101, 166, 244, 205, 10, 21, 204, 28, 62, 97, 175, 40, 157, 250, 22, 206, 97, 167, 218, 103, 202, 141, 98, 40, 222, 18, 38, 239, 90, 90, 87, 83, 124, 59, 7, 85, 179, 84, 36, 252, 36, 178, 91, 17, 238, 206, 191, 255, 81 },
                            PasswordSalt = new byte[] { 116, 63, 152, 220, 188, 64, 209, 247, 233, 157, 254, 187, 4, 137, 41, 116, 244, 151, 113, 190, 36, 254, 218, 203, 160, 97, 3, 12, 34, 145, 58, 28, 24, 125, 161, 150, 199, 70, 19, 67, 24, 115, 246, 117, 197, 160, 98, 126, 100, 236, 76, 114, 56, 118, 121, 76, 4, 61, 198, 204, 239, 208, 87, 194, 5, 40, 51, 227, 231, 161, 163, 246, 219, 217, 61, 234, 7, 88, 208, 35, 131, 176, 73, 207, 38, 124, 81, 117, 17, 154, 161, 185, 3, 235, 241, 48, 233, 238, 182, 229, 225, 159, 174, 103, 163, 119, 190, 249, 253, 13, 33, 126, 225, 149, 144, 100, 198, 71, 246, 162, 206, 186, 56, 175, 85, 37, 78, 149 },
                            Perfil = "Admin",
                            Username = "UsuarioAdmin"
                        });
                });

            modelBuilder.Entity("Calistenia.Models.RepSerie", b =>
                {
                    b.HasOne("Calistenia.Models.Exercicio", "Exercicios")
                        .WithMany("RepSeries")
                        .HasForeignKey("exercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Calistenia.Models.Treino", "Treinos")
                        .WithMany("RepSeries")
                        .HasForeignKey("treinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercicios");

                    b.Navigation("Treinos");
                });

            modelBuilder.Entity("Calistenia.Models.Treino", b =>
                {
                    b.HasOne("Calistenia.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Calistenia.Models.Exercicio", b =>
                {
                    b.Navigation("RepSeries");
                });

            modelBuilder.Entity("Calistenia.Models.Treino", b =>
                {
                    b.Navigation("RepSeries");
                });
#pragma warning restore 612, 618
        }
    }
}
